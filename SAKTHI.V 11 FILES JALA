{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c4cae77f",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-1-3a399e2eb75e>, line 37)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-1-3a399e2eb75e>\"\u001b[1;36m, line \u001b[1;32m37\u001b[0m\n\u001b[1;33m    >>> import os\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "file1 = open(\"MyFile.txt\",\"a\")\n",
    "file2 = open(r\"D:\\Text\\MyFile2.txt\",\"w+\")\n",
    "\n",
    "with open(\"test.txt\",'w',encoding = 'utf-8') as f:\n",
    "   f.write(\"my first file\\n\")\n",
    "   f.write(\"This file\\n\\n\")\n",
    "   f.write(\"contains three lines\\n\")\n",
    "\n",
    "file1 = open(\"MyFile.txt\",\"a\")\n",
    "data = file1.read()\n",
    "print(data)\n",
    "print()\n",
    "\n",
    "import struct\n",
    "\n",
    "thefile = open('somebinfile', 'r+b')\n",
    "record_size = struct.calcsize(format_string)\n",
    "\n",
    "thefile.seek(record_size * record_number)\n",
    "buffer = thefile.read(record_size)\n",
    "fields = list(struct.unpack(format_string, buffer))\n",
    "\n",
    "# Perform computations, suitably modifying fields, then:\n",
    "\n",
    "buffer = struct.pack(format_string, *fields)\n",
    "thefile.seek(record_size * record_number)\n",
    "thefile.write(buffer)\n",
    "\n",
    "thefile.close(  )\n",
    "\n",
    "f=open(\"GFG.txt\",\"r\")\n",
    "f.seek(20)\n",
    "print(f.tell())\n",
    "print(f.readline())\n",
    "f.close\n",
    "\n",
    ">>> import os\n",
    ">>> os.access('my_file', os.R_OK) # Check for read access\n",
    "True\n",
    ">>> os.access('my_file', os.W_OK) # Check for write access\n",
    "True\n",
    ">>> os.access('my_file', os.X_OK) # Check for execution access\n",
    "False\n",
    ">>> os.access('my_file', os.F_OK) # Check for existance of file\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ac449ba",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
